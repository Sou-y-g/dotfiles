"nalのtruecolor
set termguicolors
"jeaderをスペースに割り当て
let g:mapleader = "\<Space>"
" space . でvimrcを開く
nnoremap <Leader>. :new ~/.vimrc<CR>
" space aで全選択
nnoremap <Leader>a ggVG
" space ggでインデント整形
nnoremap <Leader>gg gg=G
" space eでファイラを開く
nnoremap <Leader>e :Lex<CR>
" space 4で行末へ移動（
nnoremap <Leader>4 $
" space f カーソルの下の単語を取得して、ファイル全体のその単語を別の文字に置換
nnoremap <Leader>c :%s/<C-r><C-w>//g<LEFT><LEFT>
" space qでファイル閉じる
nnoremap <Leader>q :q<CR>
" jpace w でファイル保存
nnoremap <Leader>w :w<CR>
" jpace x でファイル保存して終了
nnoremap <Leader>x :wq<CR>
" space uでvimrcを読み込む
nnoremap <silent> <Leader>u :source ~/.vimrc<CR>
"改行コードをスペース*2
imap <Nul> <Esc><S-a><Space><Space><CR>
"行番号を表示
cnoremap expr> %% ggetcmdtype() == ':' ? expand('%:h').'/' : '%%'
set number
"カーソルを表示
set cursorline
hi clear CursorLine
"swpを出さないように
set noswapfile
"検索時のハイライト設定
set hlsearch
"インクリメントサーチ
set incsearch
"コマンドライン補完
set wildmenu
"検索時のハイライト設定
set hlsearch
"インクリメントサーチ
set incsearch
"クリップボード
set clipboard+=unnamed
"jjでEsc
inoremap <silent> jj <ESC>
"ESC2回でハイライトを消す
nmap <Esc><Esc> :nohl<CR>
"color scheme
set background=dark
colorscheme hybrid
"html用自動インデント設定
set tabstop=2
set shiftwidth=2
"js用自動インデント設定
autocmd Filetype javascript set ts=2 sw=2
"コメントを水色に
hi Comment ctermfg=3
"ツールばー非表示
set guioptions-=m
"スクロールバー非表示
set guioptions+=R
"タイトルを表示
set title

"option+jkでコード移動-----------------------------
if has('macunix')
  " Option + J/K
  " ∆ == J
  " ˚ == K
  nnoremap ∆ :m .+1<CR>==
  nnoremap ˚ :m .-2<CR>==
  inoremap ∆ <Esc>:m .+1<CR>==gi
  inoremap ˚ <Esc>:m .-2<CR>==gi
  vnoremap ∆ :m '>+1<CR>gv=gv
  vnoremap ˚ :m '<-2<CR>gv=gv
endif
"--------------------------------------------------
"undoの永続---------------------------------------
if has('persistent_undo')
	let undo_path = expand('~/.vim/undo')
	exe 'set undodir=' .. undo_path
	set undofile
endif
"---------------------------------------------------

"helpを日本語化"
set helplang=ja


"Plugin-------------------------------------------
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
"ステータスコードの変更"
Plug 'itchyny/lightline.vim'
"htmlの補完 <C-y>+,"
Plug 'mattn/emmet-vim'
"ファイラー"
Plug 'lambdalisue/fern.vim'
Plug 'yuki-yano/fern-preview.vim'
"囲い'~~'などが簡単にできる"
Plug 'tpope/vim-surround'
"ALE(Vim用のLint)
Plug 'dense-analysis/ale'
"Javascript用シンタックス
Plug 'othree/yajs.vim'
"インデントの可視化
Plug 'nathanaelkane/vim-indent-guides'
"自動括弧生成
Plug 'itmammoth/doorboy.vim'
"ヘルプ日本語化
Plug 'vim-jp/vimdoc-ja'
"Markdown
"Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
"MarkdownPreviw
Plug 'previm/previm'
"Coc.nvim 自動補完等
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Coclistをfzfにやらせる
Plug 'junegunn/fzf', {'dir': '~/.fzf','do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'antoinemadec/coc-fzf'
"git vim tui
Plug 'skanehira/gh.vim'
"vim内でmarkdownPreviw
Plug 'ksudate/prev-md.vim'
"VimToDo
Plug 'bun913/min-todo.vim'
"Terraform lsp
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'hashivim/vim-terraform' , { 'for': 'terraform'}
Plug 'img-paste-devs/img-paste.vim'

call plug#end()

"Plug 'itchyny/lightline.vimのカラー設定----------
let g:lightline = {
      \ 'colorscheme': 'wombat'
      \ }
set laststatus=2
if !has('gui_running')
  set t_Co=256
endif
"--------------------------------------------------
"行番号の色
highlight LineNr ctermbg=0 ctermfg=74
"ALEの自動保存設定--------------------------------
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\}

let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config = 1
"--------------------------------------------------

"インデントの可視化設定----------------------------
"vim起動時にインデント可視化ON
let g:indent_guides_enable_on_vim_startup = 1
"無効にしたいファイル種類
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
"インデント開始列
let g:indent_guides_start_level = 1
"インデントカラーを手動設定
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=black ctermbg=23
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=gray ctermbg=8
"インデント背景の幅(0~shiftwidth)
let g:indent_guides_guide_size = 1
"デフォルトマッピング space ig を有効
"g:indent_guides_default_mapping = 0
"--------------------------------------------------
"coc.nvimの設定------------------------------------
"Diagnosticsの、左横のアイコンの色設定
highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172

"LightLineにcoc.nvimのステータスを載せます
let g:lightline = {
  \'active': {
    \'right': [
      \['coc']
    \]
  \},
  \'component_function': {
    \'coc': 'coc#status'
  \}
\}

""スペース2回でCocList
nmap <silent> <space><space> :<C-u>CocFzfList<cr>
""スペースhでHover
nmap <silent> <space>h :<C-u>call CocAction('doHover')<cr>
""スペースdfでDefinition
nmap <silent> <space>df <Plug>(coc-definition)
""スペースrfでReferences
nmap <silent> <space>rf <Plug>(coc-references)
""スペースrnでRename
nmap <silent> <space>rn <Plug>(coc-rename)
""スペースfmtでFormat
nmap <silent> <space>fmt <Plug>(coc-format)
""coc-fzfから<Esc>で抜ける
tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"

"-----------------------------------------------------------
"空行挿入key-map
function! s:blank_above(type = '') abort
  if a:type == ''
    set operatorfunc=function('s:blank_above')
    return 'g@ '
  endif

  put! =repeat(nr2char(10), v:count1)
  normal! '[
endfunction

function! s:blank_below(type = '') abort
  if a:type == ''
    set operatorfunc=function('s:blank_below')
    return 'g@ '
  endif

  put =repeat(nr2char(10), v:count1)
endfunction

nnoremap <expr> <Space>o <sid>blank_below()
nnoremap <expr> <Space>O <sid>blank_above()
"-----------------------------------------------------------


"-----------------------------------------------------------
"Markdownの設定
let g:vim_markdown_folding_disabled = 1
let g:previm_enable_realtime = 1
let g:previm_open_cmd = 'open -a Google\ Chrome'
"-----------------------------------------------------------

"-----------------------------------------------------------
"fern.vimの設定
" Show hidden files
let g:fern#default_hidden=1

"Cntrl+nでfern開く
nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=30<CR>

"fern上でファイルの中身確認できる
function! s:fern_settings() abort
  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
endfunction

augroup fern-settings
  autocmd!
  autocmd FileType fern call s:fern_settings()
augroup END
"-----------------------------------------------------------

"-----------------------------------------------------------
"gh.vimの設定
let g:gh_token = ''
"-----------------------------------------------------------
"-----------------------------------------------------------
"vimpreviewの設定
let g:auto_prev_time=5000   " set preview refresh interval (default 5000)
"-----------------------------------------------------------
"-----------------------------------------------------------
"VimToDoの設定
" ノーマルモード中のチェックボックスの未了・終了の切り替え
nnoremap <C-c> :ToggleTask<CR>
" インサートモード中の新規タスクの作成
imap <C-c> <ESC>:CreateTask<CR>A
" すぐにタスク管理用ファイルが開けるようにショートカット登録
nnoremap <Leader>t :tabe ~/todo.md<CR>
"-----------------------------------------------------------
"-----------------------------------------------------------
" fzf settings
let $FZF_DEFAULT_OPTS="--layout=reverse"
let $FZF_DEFAULT_COMMAND="rg --files --hidden --glob '!.git/**'"
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'sharp' } }

let mapleader = "\<Space>"

" fzf
nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>g :GFiles<CR>
nnoremap <silent> <leader>G :GFiles?<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>h :History<CR>
nnoremap <silent> <leader>r :Rg<CR>
"-----------------------------------------------------------
":terminalのcolor
let g:terminal_ansi_colors = [
    \ '#666666',
    \ '#f43753',
    \ '#c9d05c',
    \ '#ffc24b',
    \ '#b3deef',
    \ '#d3b987',
    \ '#73cef4',
    \ '#eeeeee',
    \ '#666666',
    \ '#f43753',
    \ '#c9d05c',
    \ '#ffc24b',
    \ '#b3deef',
    \ '#d3b987',
    \ '#73cef4',
    \ '#ffffff'
    \ ]
"-----------------------------------------------------------
"-----------------------------------------------------------
if executable('terraform-lsp')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'terraform-lsp',
    \ 'cmd': {server_info->['terraform-lsp']},
    \ 'whitelist': ['terraform','tf'],
    \ })
endif
"-----------------------------------------------------------

"clipboardの画像貼り付け
nnoremap <leader>p :r !sh /usr/local/bin/save_image.sh<CR>
